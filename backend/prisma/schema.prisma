generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Project {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    title               String
    details             String
    state               ProjectState         @default(value: Active)
    startDate           DateTime
    endDate             DateTime
    // Relations
    productBacklogItems ProductBacklogItem[]
    usersIDs            String[]             @db.ObjectId
    users               User[]               @relation(fields: [usersIDs], references: [id])
    // Timestamps
    createdAt           DateTime             @default(now())
}

model ProductBacklogItem {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    details    String
    state      WorkItemState @default(value: New)
    tag        String?
    // Relations
    workItems  WorkItem[]
    project    Project       @relation(fields: [projectId], references: [id])
    projectId  String        @db.ObjectId
    assignee   User          @relation(fields: [assigneeId], references: [id])
    assigneeId String        @db.ObjectId
    // Timestamps
    createdAt  DateTime      @default(now())
}

model WorkItem {
    id                   String             @id @default(auto()) @map("_id") @db.ObjectId
    title                String
    details              String
    state                WorkItemState      @default(value: New)
    type                 String
    // Relations
    productBacklogItem   ProductBacklogItem @relation(fields: [productBacklogItemId], references: [id])
    productBacklogItemId String             @db.ObjectId
    assignee             User               @relation(fields: [assigneeId], references: [id])
    assigneeId           String             @db.ObjectId
    // Timestamps
    createdAt            DateTime           @default(now())
}

model User {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    email               String               @unique
    password            String
    name                String
    title               String
    roles               String[]
    // Relations
    workItems           WorkItem[]
    productBacklogItems ProductBacklogItem[]
    notifications       Notifications[]
    projectIDs          String[]             @db.ObjectId
    projects            Project[]            @relation(fields: [projectIDs], references: [id])
    // Timestamps
    createdAt           DateTime             @default(now())
}

model Notifications {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    seen      Boolean? @default(false)
    type      String
    date      DateTime @default(now())
    title     String
    details   String
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?  @db.ObjectId
    // Timestamps
    createdAt DateTime @default(now())
}

enum ProjectState {
    Active
    Pending
    Finished
}

enum WorkItemState {
    New
    InProgress
    Done
}

enum WorkItemType {
    Task
    Bug
}
